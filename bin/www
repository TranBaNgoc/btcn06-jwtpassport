#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('server:server');
var http = require('http');


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '4000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require("socket.io")(server, {origins:'*:*'});

var roomID = 0;
/*
{
  roomID: int
  users: [socket.id]
}
*/
const rooms = [];
io.on('connection', socket => {
  console.log('New client connected')
  
  socket.on('SearchCompetitor', data => {
    if (typeof rooms[roomID] === 'undefined') {
      rooms.push({
        roomID: roomID + "",
        users: [socket.id],
      });
      socket.join(rooms[roomID].roomID);
      io.sockets.to(rooms[roomID].roomID).emit('isHaveCompetitor', false);
    } else {
      rooms[roomID].users.push(socket.id);
      socket.join(rooms[roomID].roomID);
      io.sockets.to(rooms[roomID].roomID).emit('isHaveCompetitor', true);
      roomID++;

    }
  })

  // just like on the client side, we have a socket.on method that takes a callback function
  socket.on('AddMessage', (messageData) => {
    // once we get a 'change color' event from one of our clients, we will send it to the rest of the clients
    // we make use of the socket.emit method again with the argument given to use from the callback function above
    let thisRoom = "";
    for (let i = 0; i < rooms.length; i++) {
      if (rooms[i].users.includes(socket.id)) {
        thisRoom = rooms[i].roomID;
        break;
      }
    }
    io.sockets.to(thisRoom).emit('BroadcastMessage', messageData)
  })
  
  socket.on('AddStep', (StepData) => {
    // once we get a 'change color' event from one of our clients, we will send it to the rest of the clients
    // we make use of the socket.emit method again with the argument given to use from the callback function above
    console.log('Message is: ', StepData)
    let thisRoom = "";
    for (let i = 0; i < rooms.length; i++) {
      if (rooms[i].users.includes(socket.id)) {
        thisRoom = rooms[i].roomID;
        break;
      }
    }
    io.sockets.to(thisRoom).emit('BroadcastStep', StepData)
  })

  socket.on('ResetGame', username => {
    let thisRoom = "";
    for (let i = 0; i < rooms.length; i++) {
      if (rooms[i].users.includes(socket.id)) {
        thisRoom = rooms[i].roomID;
        break;
      }
    }
    io.sockets.to(thisRoom).emit('RequestResetGame', username);
  })

  socket.on('RequestUndo', username => {
    let thisRoom = "";
    for (let i = 0; i < rooms.length; i++) {
      if (rooms[i].users.includes(socket.id)) {
        thisRoom = rooms[i].roomID;
        break;
      }
    }
    io.sockets.to(thisRoom).emit('BroadcastUndo', username);
  })

  socket.on('AcceptUndo', isAccept => {
    let thisRoom = "";
    for (let i = 0; i < rooms.length; i++) {
      if (rooms[i].users.includes(socket.id)) {
        thisRoom = rooms[i].roomID;
        break;
      }
    }
    io.sockets.to(thisRoom).emit('BroadcaseAcceptUndo', isAccept);
  })

  socket.on('RequestDraw', username => {
    let thisRoom = "";
    for (let i = 0; i < rooms.length; i++) {
      if (rooms[i].users.includes(socket.id)) {
        thisRoom = rooms[i].roomID;
        break;
      }
    }
    io.sockets.to(thisRoom).emit('BroadcastDraw', username);
  })

  socket.on('AcceptDraw', isAccept => {
    let thisRoom = "";
    for (let i = 0; i < rooms.length; i++) {
      if (rooms[i].users.includes(socket.id)) {
        thisRoom = rooms[i].roomID;
        break;
      }
    }
    io.sockets.to(thisRoom).emit('BroadcastAcceptDraw', isAccept);
  })

  socket.on('RequestSurrender', username => {
    let thisRoom = "";
    console.log('Message is: ', socket.id)
    for (let i = 0; i < rooms.length; i++) {
      if (rooms[i].users.includes(socket.id)) {
        thisRoom = rooms[i].roomID;
        break;
      }
    }
    console.log(thisRoom);
    io.sockets.to(thisRoom).emit('BroadcastSurrender', username);
  })
  
  socket.on('LeaveRoom', data => {
    let thisRoom = "";
    for (let i = 0; i < rooms.length; i++) {
      if (rooms[i].users.includes(socket.id)) {
        thisRoom = rooms[i].roomID;
        rooms[i].users = [];
        break;
      }
    }

    if (thisRoom != "") io.sockets.to(thisRoom).emit('CompetitorLeaveRoom', data);
    socket.leaveAll();
  })
  // disconnect is fired when a client leaves the server
  socket.on('disconnect', () => {
    console.log('user disconnected')
  })
});
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
console.log(port);
/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
